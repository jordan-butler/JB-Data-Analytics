-- The queries included in this file do not come from a specific source, but are rather answers to various business cases I have come up with myself
-- about the Northwind Database. These queries are more advanced than the ones included in my other .txt file, and show my knowledge of more
-- complicated SQL statements such as RANK, LAG, CASE, etc. These queries were developed using PostgreSQL.
								
				Page Title

-- Return Month, Product name, SalesForMonth, SalesForMonthRanking for nth best 
-- selling product for each month in 1997

SELECT * 
FROM (
	SELECT 
		CAST (EXTRACT (MONTH FROM o.orderdate) AS integer) AS month, 
		p.productname,
		ROUND (CAST (SUM (od.quantity * od.unitprice) AS numeric), 2) salesmonth,
		RANK () OVER (PARTITION BY EXTRACT (MONTH FROM o.orderdate)
		ORDER BY SUM (od.quantity * od.unitprice) DESC) monthrank
	FROM order_details od
	INNER JOIN products p ON od.productid = p.productid
	INNER JOIN orders o ON od.orderid = o.orderid
	WHERE o.orderdate >= '1997-01-01' AND o.orderdate <= '1997-12-31'
	GROUP BY EXTRACT (MONTH FROM o.orderdate), p.productid
) subq
WHERE monthrank = n
ORDER BY month, monthrank, productname


-- RANK OF PRODUCT SALES ALL TIME

SELECT p.productname, 
	ROUND (CAST (SUM (od.quantity * od.unitprice) AS numeric),2) totalsales,
	RANK() OVER (ORDER BY SUM (od.quantity * od.unitprice) DESC) totalsalesrank
FROM order_details od
INNER JOIN products p ON od.productid = p.productid
GROUP BY p.productname

-- Return CompanyName, NumOrders list for all customers that have at least 3 orders 
-- with a discount of greater than or equal 20%

SELECT *
FROM (
	SELECT c.companyname CompanyName, COUNT (od.orderid) NumOfOrders
	FROM order_details od
	INNER JOIN orders o ON od.orderid = o.orderid
	INNER JOIN customers c ON o.customerid = c.customerid
	WHERE od.discount > .20
	GROUP BY c.companyname
	ORDER BY c.companyname ASC
) subq
WHERE numoforders >= 3
ORDER BY numoforders DESC, CompanyName ASC

-- Return ProductName, "Number of Months Ordered In" for products that were ordered 
-- in less than 6 unique months out of the year

SELECT * 
FROM( 
	SELECT p.productname ProductName, 
		COUNT (DISTINCT EXTRACT ( MONTH FROM o.orderdate)) NumMonths
	FROM orders o
	INNER JOIN order_details od ON o.orderid = od.orderid
	INNER JOIN products p ON od.productid = p.productid
	WHERE o.orderdate >= '1997-01-01' AND o.orderdate <= '1997-12-31'
	GROUP BY p.productname
) subq
WHERE NumMonths < 6
ORDER BY NumMonths ASC, ProductName ASC

-- Create a report (letter, totalsales, rank) that ranks the all time sales for 
-- products based on what letter they start with (include letters that don't have
-- a product that starts with them as well and rank them last) AND 
-- (group all products that start with something other than a letter [number, 
-- special character, etc] together as the letter "OTHER")

SELECT 
	l.lettername FirstLetter,
	ROUND (CAST (SUM (od.quantity * od.unitprice) AS numeric), 2) TotalSales,
	RANK () OVER (ORDER BY SUM (od.quantity * od.unitprice) DESC NULLS LAST) SalesRank
FROM order_details od
INNER JOIN products p ON od.productid = p.productid
RIGHT JOIN letters l ON p.letterid = l.letterid
GROUP BY FirstLetter
ORDER BY SalesRank ASC, FirstLetter ASC

-- Return the productid, product name, and average quantity per order (rounded down
-- to the nearest whole number) for all products, sort from highest quantity to 
-- lowest quantity.

SELECT 
	p.productid "Product ID",
	p.productname "Product Name", 
	CEILING (AVG (od.quantity)) "Avg Quantity Per Order"
FROM order_details od
INNER JOIN products p ON od.productid = p.productid
GROUP BY p.productid, p.productname
ORDER BY CEILING (AVG (od.quantity)) DESC, p.productid ASC

-- Return Month/Year (as single field), total number of orders, and total freight for 
-- each month between 1997 and 1998 where total number of orders > 35, sort by total
-- freight DESC.

WITH subq AS (
	SELECT 
		TO_CHAR (o.orderdate, 'Month') || ', ' || EXTRACT (YEAR FROM o.orderdate) month_year,
		COUNT (DISTINCT o.orderid) numorders,
		ROUND (SUM (o.freight)) totalfreight
	FROM orders o
	WHERE EXTRACT (YEAR FROM o.orderdate) BETWEEN '1997' AND '1998'
	GROUP BY month_year
)
SELECT * 
FROM subq
WHERE numorders > 35
ORDER BY totalfreight DESC

-- The Pricing Team wants to know which products had an unit price increase and the percentage
-- increase was not between 20% and 30%. In order to help them they asked you to provide them
-- a list of products with: their product name, their current unit price (formatted to have only 
-- 2 decimals), their previous unit price (formatted to have only 2 decimals),
-- their percentage increase as: (New Number - Original Number) รท Original Number ร 100 
-- (with the result formatted to an integer, e.g 50 for 50%),
-- Filtered on the following conditions: their percentage increase is not between 20% and 30%,
-- their total number of orders is greater than 10 orders.
-- Finally order the results by percentage increase (ascending order).

WITH subq AS (
	SELECT
		od.productid productid,
		p.productname productname,
		ROUND(od.unitprice :: NUMERIC, 2) currentprice,
		ROUND(LAG(od.unitprice) OVER (PARTITION BY p.productid ORDER BY o.orderid) :: NUMERIC, 2) 
			previousprice
	FROM products p
	INNER JOIN order_details od 
		ON p.productid = od.productid
	INNER JOIN orders o 
		ON od.orderid = o.orderid
	ORDER BY p.productname ASC, o.orderid ASC
)
SELECT subq.productname, subq.currentprice, subq.previousprice, 
	ROUND(100 * (subq.currentprice - subq.previousprice)/subq.previousprice) percentageincrease,
	COUNT (DISTINCT od.orderid) numorders
FROM subq
INNER JOIN order_details od 
	ON subq.productid = od.productid
WHERE 
	subq.currentprice != subq.previousprice 
GROUP BY subq.productname, subq.currentprice, subq.previousprice
HAVING 
	COUNT (DISTINCT od.orderid) > 10 AND 
	ROUND(100 * (subq.currentprice - subq.previousprice)/subq.previousprice) NOT BETWEEN 20 AND 30
ORDER BY percentageincrease ASC

-- List: category name, price category (below $20, between $20-$50, above $50), total sales ($),
-- total orders (#). Requirements: format total sales as integer (round to nearest whole number).
-- Order by: category name ASC, price range ASC

SELECT 
	c.categoryname,
	CASE
		WHEN p.unitprice < 20 THEN '1. Below $20'
		WHEN p.unitprice BETWEEN 20 AND 50 THEN '2. $20-$50'
		WHEN p.unitprice > 50 THEN '3. Above $50'
		END pricerange,
	ROUND (SUM (od.unitprice * od.quantity))::INTEGER totalsales,
	COUNT (DISTINCT od.orderid) totalorders
FROM categories c
LEFT JOIN products p
	ON c.categoryid = p.categoryid
INNER JOIN order_details od
	ON p.productid = od.productid
GROUP BY c.categoryname, pricerange
ORDER BY c.categoryname ASC, pricerange ASC

-- List: category name, region category (north america, asia-pacific, or europe), total units in 
-- stock by region, total units on order by region. Requirements: N/A. Order by: region category 
-- ASC, category name ASC.

WITH subq AS (
	SELECT 
		CASE
			WHEN s.country IN ('USA', 'Brazil', 'Canada') THEN 'North America'
			WHEN s.country IN ('Japan', 'Singapore', 'Australia') THEN 'Asia-Pacific'
			WHEN s.country IN ('UK', 'Spain', 'Sweden', 'Germany', 'Italy', 'Norway', 
			'France', 'Denmark', 'Netherlands', 'Finland') THEN 'Europe'
			ELSE 'Other'
			END region,
		c.categoryname category
	FROM categories c
	INNER JOIN products p
		ON c.categoryid = p.categoryid
	INNER JOIN suppliers s
		ON p.supplierid = s.supplierid
)
SELECT 
	region,
	category,
	SUM (p.unitsinstock) unitsinstock,
	SUM (p.unitsonorder) unitsonorder
FROM subq
INNER JOIN categories c
	ON subq.category = c.categoryname
INNER JOIN products p 
	ON c.categoryid = p.productid
GROUP BY category, region
ORDER BY region ASC, unitsinstock DESC, unitsonorder DESC 

-- List: category name, product name, unit price, category average unit price, category median
-- unit price, unit price against category average rank (below, equal, or above average), unit price
-- against category median rank (below, equal, or above average). Requirements/Conditions: product
-- is not discontinued. Order by: category name ASC, product name ASC.

SELECT 
	c.categoryname, 
	p.productname, 
	p.unitprice,
	avgcatprice,
	CASE
		WHEN p.unitprice < avgcatprice THEN 'Below Average'
		WHEN p.unitprice = avgcatprice THEN 'Equal Average'
		WHEN p.unitprice > avgcatprice THEN 'Above Average'
		END avgpricerank,
	medcatprice,
	CASE
		WHEN p.unitprice < medcatprice THEN 'Below Average'
		WHEN p.unitprice = medcatprice THEN 'Equal Average'
		WHEN p.unitprice > medcatprice THEN 'Above Average' 
		END medpricerank
FROM products p
INNER JOIN categories c
	ON p.categoryid = c.categoryid
JOIN	(SELECT
		 ROUND (AVG (p.unitprice)::NUMERIC, 2) avgcatprice,
		 c.categoryname
		 FROM products p
		 INNER JOIN categories c
		 	ON p.categoryid = c.categoryid
		 GROUP BY c.categoryname) subq2
	ON c.categoryname = subq2.categoryname
JOIN 
		(SELECT 
		 ROUND (PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY p.unitprice)::NUMERIC, 2)
	 		medcatprice,
		 c.categoryname
		 FROM products p
		 INNER JOIN categories c 
		 	ON p.categoryid = c.categoryid
		 GROUP BY c.categoryname) subq
	ON c.categoryname = subq.categoryname
WHERE p.discontinued = 0
GROUP BY c.categoryname, p.productname, p.unitprice, subq.medcatprice, subq2.avgcatprice
ORDER BY c.categoryname ASC, p.productname ASC

-- For all employees, list: full name (one field), job title, total sales amount (excluding 
-- discount)($), total number of orders, total number of entries (1 entry = 1 row in an order),
-- average amount ($) per order, average amount ($) per entry, total discount amount ($), total 
-- sales amount (including discount) ($), total discount percentage. Requirements/Conditions: round 
-- columns 3,6,7 8,9 to 2 decimal points. Order by: total sales amount (including discount) DESC.

WITH subq AS (
	SELECT 
		e.employeeid,
		ROUND (SUM (od.unitprice * od.quantity)::NUMERIC, 2) totalsalesnodiscount,
		ROUND (SUM (od.unitprice * od.quantity * od.discount)::NUMERIC, 2) 
		totaldiscountamount
	FROM employees e
	INNER JOIN orders o 
		ON e.employeeid = o.employeeid
	INNER JOIN order_details od 
		ON o.orderid = od.orderid
	GROUP BY e.employeeid		
)
SELECT
	e.employeeid,
	e.firstname || ' ' || e.lastname employeename,
	e.title,
	ROUND (SUM (od.unitprice * od.quantity)::NUMERIC, 2) totalsalesnodiscount, 
	COUNT (DISTINCT od.orderid) numorders, 
	COUNT (od.orderid) numentries,
	ROUND ((SUM (od.unitprice * od.quantity) / COUNT (DISTINCT od.orderid))::NUMERIC, 2) 
		avgamountperorder,
	ROUND (AVG (od.unitprice * od.quantity)::NUMERIC,2) avgamountperentry,
	ROUND (SUM (od.unitprice * od.quantity * od.discount)::NUMERIC, 2) 
		totaldiscountamount,
	ROUND (SUM ((od.unitprice * od.quantity) - (od.unitprice * od.quantity * od.discount) )
		::NUMERIC, 2) totalsaleswithdiscount,
	ROUND(((subq.totaldiscountamount / subq.totalsalesnodiscount) * 100)::NUMERIC, 2)
		totaldiscountpercentage
FROM employees e
INNER JOIN subq
	ON e.employeeid = subq.employeeid
INNER JOIN orders o 
	ON e.employeeid = o.employeeid
INNER JOIN order_details od 
	ON o.orderid = od.orderid
GROUP BY e.employeeid, subq.totaldiscountamount, subq.totalsalesnodiscount
ORDER BY totalsaleswithdiscount DESC

-- List of companies who placed less orders in 1997 than they did in 1996, and how 
-- many orders they placed in each of those year.
WITH subq AS (
	SELECT
		c.companyname, 
		COUNT (o.customerid) FILTER (WHERE EXTRACT (YEAR FROM o.orderdate) = 1996) 
			AS numorders1996,
		COUNT (o.customerid) FILTER (WHERE EXTRACT (YEAR FROM o.orderdate) = 1997) 
			AS numorders1997
						-- FILTER WORKS WITH ANY AGGREGATE FUNCTION!!!!!
	FROM customers c
	LEFT JOIN orders o
		ON c.customerid = o.customerid
	GROUP BY c.customerid
	ORDER BY c.companyname ASC
)
SELECT * 
FROM subq
WHERE 
	numorders1996 > numorders1997

-- What month has had most sales across each year (include total sales amount)?
SELECT 
	EXTRACT (YEAR FROM o.orderdate) "Year",
	TO_CHAR (o.orderdate, 'Month') "Month",
	ROUND (SUM (od.quantity * od.unitprice)::numeric, 2) "Total Sales"
FROM order_details od
INNER JOIN orders o
	ON od.orderid = o.orderid
GROUP BY 1, 2
ORDER BY (RANK () OVER (PARTITION BY EXTRACT (YEAR FROM o.orderdate)
	ORDER BY SUM (od.quantity * od.unitprice) DESC)) ASC
LIMIT 3






	
	
	
	
	
	
	





















